###########
#	MySQL #
###########
jdbc.driverClassName=com.mysql.cj.jdbc.Driver
#jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc\:mysql\://139.159.190.23/TESTDB
#jdbc.url=jdbc\:mysql\://127.0.0.1/test?serverTimezone\=GMT&characterEncoding\=utf8&useSSL\=false
jdbc.username=root
jdbc.password=123456


###########
#  Oracle #
###########

#jdbc.driverClassName=oracle.jdbc.driver.OracleDriver
#jdbc.url=jdbc:oracle:thin:@192.168.2.150:1521:orcl
#jdbc.username=C##xhkj
#jdbc.password=123456



#<!-- 配置初始化大小、最小、最大 -->
druid.initialSize=10
druid.minIdle=1
druid.maxActive=200
#<!-- 配置获取连接等待超时的时间 -->
druid.maxWait=60000
#<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
druid.timeBetweenEvictionRunsMillis=60000
#<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
druid.minEvictableIdleTimeMillis=300000
#<!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
druid.validationQuery=SELECT 'x' from dual 
#<!--启用空闲连接检测，以便回收申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
druid.testWhileIdle=true
#<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
druid.testOnBorrow=false
#<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
druid.testOnReturn=false
#<!-- 打开PSCache，并且指定每个连接上PSCache的大小 如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
druid.poolPreparedStatements=false
druid.maxPoolPreparedStatementPerConnectionSize=20
#<!-- 配置监控统计拦截的filters ,StatFilter，用于统计监控信息-->
druid.filters=stat
#<!--慢SQL记录以及显示-->
druid.statFilter.slowSqlMillis=1000
druid.statFilter.logSlowSql=true
#<!-- SQL合并设置 -- >
druid.statFilter.mergeSql=true
#<!--合并多个数据源的监控数据-->
druid.useGlobalDataSourceStat=true
#<!-- 保存DruidDataSource的监控记录 -->
druid.timeBetweenLogStatsMillis=300000